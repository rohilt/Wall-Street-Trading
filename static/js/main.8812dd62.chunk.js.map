{"version":3,"sources":["res/firebase.ts","views/LoginView.tsx","views/StocksView.tsx","views/OrdersView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","functions","LoginView","props","onLogin","useState","username","setUsername","history","useHistory","className","htmlFor","id","minLength","type","onChange","e","target","value","onClick","preventDefault","addPlayer","httpsCallable","a","console","warn","push","loginAsync","handleLogin","StocksView","prices","holdings","player","totalEquity","useMemo","buyingPower","reduce","accum","currentPrice","symbol","shares","style","display","justifyContent","flexDirection","alignItems","width","flexShrink","toFixed","flexGrow","marginRight","marginLeft","map","holding","to","avgCost","OrdersView","useParams","newTrade","useRef","isBid","price","find","amount","playerID","getTotalCost","Number","current","totalCost","setTotalCost","updateField","field","log","name","defaultValue","min","step","Math","round","window","alert","String","addOrder","err","submit","Object","keys","s","flexWrap","entries","App","setPrices","setHoldings","setPlayer","useEffect","collection","onSnapshot","querySnapshot","docs","forEach","doc","data","where","query","viewProps","height","href","padding","flex","overflow","paddingBottom","path","bottom","position","backgroundColor","color","margin","borderWidth","borderTopWidth","offset","length","p","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8812dd62.chunk.js","sourcesContent":["import firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport 'firebase/functions';\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyB5-X0jYNuIinzUIprbY8L1YN_R53zbu0M\",\r\n  authDomain: \"wall-street-mafia.firebaseapp.com\",\r\n  projectId: \"wall-street-mafia\",\r\n  storageBucket: \"wall-street-mafia.appspot.com\",\r\n  messagingSenderId: \"965478967147\",\r\n  appId: \"1:965478967147:web:38a323d3608ec485e38e2e\",\r\n  measurementId: \"G-3N44MFRRSB\"\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const db = firebase.firestore();\r\nexport const functions = firebase.functions();\r\n","import { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nimport { functions } from '../res/firebase';\r\n\r\ninterface LoginViewProps {\r\n  onLogin: (username: string) => any;\r\n}\r\n\r\nconst LoginView: FunctionComponent<LoginViewProps> = (props) => {\r\n  const { onLogin } = props;\r\n  const [username, setUsername] = useState('');\r\n\r\n  const history = useHistory();\r\n\r\n  const handleLogin = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    e.preventDefault();\r\n    const addPlayer = functions.httpsCallable('addPlayer');\r\n    const loginAsync = async () => {\r\n      try {\r\n        await addPlayer({ username });\r\n      } catch (err) {\r\n        console.warn(err);\r\n        // if (res.data) {\r\n        //   console.log(res.data);\r\n        // }\r\n      }\r\n      onLogin(username);\r\n      history.push('/stocks');\r\n    }\r\n    loginAsync();\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <fieldset>\r\n        <legend>enter the market</legend>\r\n        <div className=\"form-group\">\r\n          <label htmlFor=\"username\">name</label>\r\n          <input\r\n            id=\"username\"\r\n            minLength={1}\r\n            type=\"text\"\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          />\r\n        </div>\r\n        <button\r\n          onClick={(e) => (username ? handleLogin(e) : null)}\r\n          className={\r\n            username ? 'btn btn-primary btn-ghost' : 'btn btn-error btn-ghost'\r\n          }\r\n        >\r\n          log in\r\n        </button>\r\n      </fieldset>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default LoginView;\r\n","import React, { FunctionComponent, useMemo } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { ViewProps } from '../res/interfaces';\r\n\r\nconst StocksView: FunctionComponent<ViewProps> = (props) => {\r\n  const { prices, holdings, player } = props;\r\n  // let stockSymbols = ['GME', 'AMC', 'MSFT', 'AAPL', 'GOOGL', 'COF', 'AXP', 'HD', 'C', 'ACN'];\r\n\r\n  const totalEquity = useMemo(() => {\r\n    return (player?.buyingPower || 0) + prices.reduce((accum, { currentPrice, symbol }) => (\r\n      accum + currentPrice * (holdings[symbol]?.shares || 0)\r\n    ), 0)\r\n  }, [prices, holdings, player])\r\n\r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'flex-start', flexDirection: 'row', alignItems: \"flex-start\", width: '100%'}}>\r\n      <div style={{ flexDirection: 'column' }}>\r\n        <div className=\"terminal-alert terminal-alert-primary\" style={{flexShrink: 5}}>\r\n          <b>buying power</b>: ${player?.buyingPower.toFixed(2) || '--.--'}\r\n        </div>\r\n        <div className=\"terminal-alert terminal-alert-primary\" style={{flexShrink: 5}}>\r\n          <b>total equity</b>: ${totalEquity.toFixed(2) || '--.--'}\r\n        </div>\r\n      </div>\r\n      <div style={{ flexGrow: 3, marginRight: 50, marginLeft: 50 }}>\r\n        <header>\r\n          <h2> available stocks </h2>\r\n        </header>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>symbol</th>\r\n              <th>last exec. price</th>\r\n              <th>no. of shares</th>\r\n              <th>total equity</th>\r\n              <th>avg. cost</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {prices.map(({ symbol, currentPrice }) => {\r\n              const holding = holdings[symbol];\r\n              const shares = holding?.shares || 0;\r\n              return (\r\n                <tr key={symbol}>\r\n                  <td><Link to={`/orders/${symbol}`}>{symbol}</Link></td>\r\n                  <td>${currentPrice.toFixed(2)}</td>\r\n                  <td>{shares}</td>\r\n                  <td>${(currentPrice * shares).toFixed(2)}</td>\r\n                  <td>{holding ? `$${holding.avgCost.toFixed(2)}` : '-'}</td>\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      {/* <div style={{ flexGrow: 3, marginLeft: 50, marginRight: 50 }}>\r\n        <div className=\"terminal-alert terminal-alert-primary\">\r\n          <b>buying power</b>: $1234.56\r\n        </div>\r\n        <form>\r\n          <fieldset>\r\n            <legend>submit a trade</legend>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"username\">name</label>\r\n              <input id=\"username\" minLength={1} type=\"text\"></input>\r\n            </div>\r\n            <button\r\n              className={true ? 'btn btn-ghost' : 'btn btn-error btn-ghost'}\r\n            >\r\n              trade\r\n            </button>\r\n          </fieldset>\r\n        </form>\r\n        <hr />\r\n        <h2>current holdings</h2>\r\n        {stockSymbols.map((s) => (\r\n          <div style={{ display: 'inline' }}>\r\n            <a>{s}</a>,{' '}\r\n          </div>\r\n        ))}\r\n        <br />\r\n        <br />\r\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n          {stockSymbols.map((s) => (\r\n            <div>\r\n              <div className=\"terminal-card\">\r\n                <header>{s}</header>\r\n                <div>\r\n                  Sample information about this stock... The number of shares...\r\n                  The total amount of equity...\r\n                </div>\r\n              </div>\r\n              <br />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StocksView;\r\n","import React, { FunctionComponent, useState, useRef } from 'react';\r\nimport { Link, useParams, useHistory } from 'react-router-dom';\r\n\r\nimport { ViewProps } from '../res/interfaces';\r\nimport { functions } from '../res/firebase';\r\n\r\ninterface OrdersViewParams {\r\n  symbol?: string;\r\n}\r\n\r\n// interface Order {\r\n//   isBid: boolean;\r\n//   symbol: string;\r\n//   price: number;\r\n//   amount: number;\r\n//   playerID: number;\r\n// }\r\n\r\nconst OrdersView: FunctionComponent<ViewProps> = (props) => {\r\n  const { prices, holdings, player } = props;\r\n  const { symbol } = useParams<OrdersViewParams>();\r\n\r\n  const history = useHistory();\r\n\r\n  const newTrade = useRef<{[field: string]: string | number | boolean}>({\r\n    isBid: true,\r\n    symbol: symbol || '',\r\n    price: prices.find(price => price.symbol === symbol)?.currentPrice || 0.01,\r\n    amount: 1,\r\n    playerID: player!.id,\r\n  });\r\n\r\n  const getTotalCost = () => Number(newTrade.current.price) * Number(newTrade.current.amount);\r\n\r\n  const [totalCost, setTotalCost] = useState(getTotalCost);\r\n\r\n  const handleSubmit = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n    e.preventDefault();\r\n    const submit = async () => {\r\n      if (newTrade.current['isBid']) {\r\n        if (getTotalCost() > player!.buyingPower) {\r\n          window.alert('Not enough buying power.');\r\n          return;\r\n        }\r\n      } else {\r\n        if (newTrade.current['amount'] > holdings[String(newTrade.current['symbol'])]?.shares || 0) {\r\n          window.alert('Not enough shares.');\r\n          return;\r\n        }\r\n      }\r\n      const addOrder = functions.httpsCallable('addOrder');\r\n      try {\r\n        addOrder(newTrade.current);\r\n        newTrade.current = {\r\n          isBid: true,\r\n          symbol: symbol || '',\r\n          price: prices.find(price => price.symbol === symbol)?.currentPrice || 0,\r\n          amount: 0,\r\n          playerID: player!.id,\r\n        };\r\n        history.push('/stocks');\r\n      } catch (err) {\r\n        console.warn(err);\r\n      }\r\n    };\r\n    submit();\r\n  };\r\n\r\n  const updateField = (field: string, value: any) => {\r\n    newTrade.current[field] = value;\r\n    console.log(newTrade.current);\r\n    setTotalCost(getTotalCost());\r\n  };\r\n  \r\n  return (\r\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n      <div style={{ flexGrow: 1, marginRight: 50, marginLeft: 50 }}>\r\n        <header>\r\n          <h2> current prices </h2>\r\n        </header>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th>symbol</th>\r\n              <th>price</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {prices.map(({ symbol, currentPrice }) => (\r\n              <tr key={symbol}>\r\n                <td>{symbol}</td>\r\n                <td>${currentPrice.toFixed(2)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div style={{ flexGrow: 3, marginLeft: 50, marginRight: 50 }}>\r\n        <div className=\"terminal-alert terminal-alert-primary\">\r\n          <b>buying power</b>: ${player ? player.buyingPower.toFixed(2) : '--.--'}\r\n        </div>\r\n        <form>\r\n          <fieldset>\r\n            <legend>submit a trade</legend>\r\n            <div className=\"form-group\">\r\n              <label htmlFor={'select'}>trade type</label>\r\n              <br />\r\n              <input\r\n                type={'radio'}\r\n                id={'bid'}\r\n                name={'type'}\r\n                onChange={e => updateField('isBid', true)}\r\n              />\r\n              <label htmlFor={'bid'}>bid</label>\r\n              &nbsp;&nbsp;&nbsp;\r\n              <input\r\n                type={'radio'}\r\n                id={'ask'}\r\n                name={'type'}\r\n                onChange={e => updateField('isBid', false)}\r\n              />\r\n              <label htmlFor={'ask'}>ask</label>\r\n              <br />\r\n              <label htmlFor=\"symbol\">symbol</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"symbol\"\r\n                minLength={1}\r\n                defaultValue={symbol}\r\n                onChange={e => updateField('symbol', e.target.value)}\r\n              />\r\n              <label htmlFor=\"price\">price</label>\r\n              <input\r\n                id=\"price\"\r\n                type=\"number\"\r\n                min={0.01}\r\n                step={0.01}\r\n                defaultValue={Math.round((prices.find(price => price.symbol === symbol)?.currentPrice || 0) * 100) / 100}\r\n                onChange={e => updateField('price', Number(e.target.value))}\r\n              />\r\n              <label htmlFor=\"quantity\">quantity</label>\r\n              <input\r\n                id=\"quantity\"\r\n                type=\"number\"\r\n                min={1}\r\n                step={1}\r\n                defaultValue={1}\r\n                onChange={e => updateField('amount', Number(e.target.value))}\r\n              />\r\n              <h2>Total cost: <u>${totalCost}</u></h2>\r\n            </div>\r\n            <button\r\n              className={true ? 'btn btn-ghost' : 'btn btn-error btn-ghost'}\r\n              onClick={handleSubmit}\r\n            >\r\n              trade\r\n            </button>\r\n          </fieldset>\r\n        </form>\r\n        <hr />\r\n        <h2>current holdings</h2>\r\n        <span>\r\n          &nbsp;&middot;&nbsp;\r\n        </span>\r\n        {Object.keys(holdings).map((s) => (\r\n          <span key={s}>\r\n            <Link to={`/orders/${s}`}>{s}</Link>&nbsp;&middot;&nbsp;\r\n          </span>\r\n        ))}\r\n        <br />\r\n        <br />\r\n        <div style={{ display: 'flex', flexWrap: 'wrap' }}>\r\n          {Object.entries(holdings).map(([symbol, holding]) => (\r\n            <div key={symbol}>\r\n              <div className=\"terminal-card\">\r\n                <header>{symbol}</header>\r\n                <div>\r\n                  Number of shares: {holding.shares}\r\n                  <br />\r\n                  Total equity: ${(\r\n                    (prices.find(price => price.symbol === holding.symbol)?.currentPrice || 0) * holding.shares\r\n                  ).toFixed(2)}\r\n                </div>\r\n              </div>\r\n              <br />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OrdersView;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Ticker from 'react-ticker';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Link,\r\n  Route,\r\n  Redirect,\r\n} from 'react-router-dom';\r\n\r\nimport LoginView from './views/LoginView';\r\nimport StocksView from './views/StocksView';\r\nimport OrdersView from './views/OrdersView';\r\nimport { db } from './res/firebase';\r\nimport { Stock, Holding, Player, HoldingMap } from './res/interfaces';\r\n\r\nfunction App() {\r\n  const [username, setUsername] = useState('');\r\n  \r\n  const [prices, setPrices] = useState<Array<Stock>>([]);\r\n  const [holdings, setHoldings] = useState<HoldingMap>({});\r\n  const [player, setPlayer] = useState<Player | null>(null);\r\n\r\n  useEffect(() => {\r\n    return db.collection('stocks').onSnapshot(querySnapshot => {\r\n      const docs = [] as Array<Stock>;\r\n      querySnapshot.forEach(doc => docs.push(doc.data() as Stock))\r\n      setPrices(docs);\r\n      console.log(docs);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!username) {\r\n      setPlayer(null);\r\n      return;\r\n    };\r\n    return db.collection('players').where('username', '==', username).onSnapshot(query => {\r\n      const doc = query.docs[0];\r\n      if (!doc) return;\r\n      setPlayer(doc.data() as Player || null);\r\n    });\r\n  }, [username]);\r\n\r\n  useEffect(() => {\r\n    return db.collection('players').doc(String(player?.id)).collection('holdings').onSnapshot(querySnapshot => {\r\n      const holdings = {} as HoldingMap;\r\n      querySnapshot.forEach(doc => {\r\n        const holding = doc.data() as Holding;\r\n        holdings[holding.symbol] = holding;\r\n      });\r\n      setHoldings(holdings);\r\n      console.log(holdings);\r\n    });\r\n  }, [player]);\r\n\r\n  const handleLogin = (username: string) => {\r\n    setUsername(username);\r\n  };\r\n\r\n  const viewProps = { prices, holdings, player };\r\n\r\n  return (\r\n    <Router>\r\n      {username ? null : <Redirect to=\"/login\" />}\r\n      <div\r\n        className=\"terminal\"\r\n        style={{ display: 'flex', height: '100%', flexDirection: 'column' }}\r\n      >\r\n        <div\r\n          className=\"terminal-nav\"\r\n          style={{\r\n            alignItems: 'flex-start',\r\n            marginLeft: 100,\r\n            marginRight: 100,\r\n          }}\r\n        >\r\n          <header className=\"terminal-logo\">\r\n            <div className=\"logo terminal-prompt\">wall street trading</div>\r\n            <blockquote>\r\n              <small>\r\n                the markets can remain irrational longer than you can remain\r\n                solvent\r\n              </small>\r\n            </blockquote>\r\n          </header>\r\n          <nav className=\"terminal-menu\">\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/stocks\">\r\n                  <a href={'.'}>stocks</a>\r\n                </Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/orders\">\r\n                  <a href={'.'}>orders</a>\r\n                </Link>\r\n              </li>\r\n              <li>{username ? username : <b>not logged in</b>}</li>\r\n            </ul>\r\n          </nav>\r\n        </div>\r\n        <div\r\n          className=\"container\"\r\n          style={{\r\n            padding: 0,\r\n            flex: 1,\r\n            overflow: 'auto',\r\n            paddingBottom: '10%',\r\n          }}\r\n        >\r\n          <Switch>\r\n            <Route path=\"/login\">\r\n              <LoginView onLogin={handleLogin} />\r\n            </Route>\r\n            <Route path=\"/stocks\">\r\n              {username ? <StocksView {...viewProps} /> : <Redirect to={'/login'} />}\r\n            </Route>\r\n            <Route path=\"/orders/:symbol\">\r\n              {username ? <OrdersView {...viewProps} /> : <Redirect to={'/login'} />}\r\n            </Route>\r\n            <Route path=\"/orders\">\r\n              {username ? <OrdersView {...viewProps} /> : <Redirect to={'/login'} />}\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Redirect to=\"/login\" />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n        <div\r\n          className=\"terminal-alert\"\r\n          style={{\r\n            bottom: 0,\r\n            position: 'fixed',\r\n            width: '100%',\r\n            backgroundColor: '#000000',\r\n            color: '#3db818',\r\n            margin: 0,\r\n            padding: 0,\r\n            borderWidth: 0,\r\n            borderTopWidth: 1,\r\n          }}\r\n        >\r\n          <Ticker offset={'run-in'}>\r\n            {() => prices.length ? \r\n              prices.map(({ symbol: s, currentPrice: p }) => (\r\n                <h1 key={s} style={{ color: '#7ee460' }} >\r\n                  {s} ${p.toFixed(2)}&nbsp;&middot;&nbsp;\r\n                </h1>\r\n              )) : <h1>&nbsp;</h1>\r\n            }\r\n          </Ticker>\r\n        </div>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}